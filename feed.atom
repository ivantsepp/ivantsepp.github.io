<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title></title>
 <link href="http://www.tseivan.com/atom.xml" rel="self"/>
 <link href="http://www.tseivan.com/"/>
 <updated>2014-10-16T02:52:07-04:00</updated>
 <id>http://www.tseivan.com</id>
 <author>
   <name>Ivan Tse</name>
   <email>ivan.tse1@gmail.com</email>
 </author>

 
 <entry>
   <title>GoGaRuCo 2014 Talks</title>
   <link href="http://www.tseivan.com/gogaruco-2014-talks"/>
   <updated>2014-10-16T00:00:00-04:00</updated>
   <id>http://www.tseivan.com/gogaruco-2014-talks</id>
   <content type="html">&lt;p&gt;I enjoy watching conference talks as they do not require a lot of focus and attention that programming demands. It&#39;s a nice way to be productive while feeling lazy (I usually watch talks from my tablet on my bed). Talks are an insight into the experiences and interests of other people in the community. There are many moments of &quot;Wow, that was really cool, I should check that out sometime&quot; or &quot;I didn&#39;t know that is how it worked. TIL.&quot;. My curiosity and excitement about programming are piqued, especially at times when I&#39;ve been stuck working on a long project.&lt;/p&gt;

&lt;p&gt;My main source of talks are from &lt;a href=&quot;https://www.youtube.com/user/Confreaks&quot;&gt;Confreaks&lt;/a&gt;. They upload recorded videos of talks from most of the popular conferences and I&#39;m extremely grateful and appreciate of their work. Whenever they upload videos of a recent conference, I try to make time to watch most of them or at least the ones with catchy titles. After doing this for some time, I realize that sometimes there are talks that I really enjoyed but I forget what the speaker talked about several weeks later. By compiling a list of my favorite talks with a quick summary, I hope this will serve as a helpful bookmark for my future self. This list is highly subjected and is based on my interests and background. It might be that I&#39;m already familiar with the topic so the talk didn&#39;t make my list. If you by any chance share similar tastes with me, hopefully this list is a good recommendation of what you should watch!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=r3bi2xv5t20&quot;&gt;Gilding the Rose: Refactoring Legacy Code&lt;/a&gt; - A refactoring talk of the Gilded Rose. Sandi Metz did a similar refactoring talk on this kata. Randy Coulman walks through how he firsts mechanically restructures the code and then uses small steps to improve.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=pTmTh7LNVic&quot;&gt;Building an ORM with AReL: Walking up the (AS)Tree&lt;/a&gt; - A quick introduction to how an ORM is coded. There are concepts like adapters, types, builder, column, attributes, attribute set, etc... Vipul Amler basically does a walkthrough of &lt;a href=&quot;https://github.com/prathamesh-sonpatki/torm&quot;&gt;TORM - Tiny implementation of ORM on top of ARel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=asttlUG2OuI&quot;&gt;Why We Can&#39;t Have Nice Things: Floats, Dates, and Names&lt;/a&gt; - I remember watching this talk from some other conference. Regardless, this is a funny and interesting look at the weird edge cases of floats, dates, and names when we make bad assumptions. John Feminella has made a repo for exploring Ruby&#39;s Float internals &lt;a href=&quot;https://github.com/fj/floatboat&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=EcnvbsXdbtI&quot;&gt;Building Board Games with Ruby&lt;/a&gt; - I thought this was a very interesting talk as Yonatan Bergman uses Ruby to tests out how well his board game does via simulations. &lt;a href=&quot;https://github.com/yonbergman/missiles_and_microchips&quot;&gt;Here is his repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4tBCDOgtWCg&quot;&gt;The Short and Happy Lives of TCP and HTTP Requests&lt;/a&gt; - Starr Horne talks about the protocol of the Web and how we can optimize it. A lot of this stuff is above my head but this is a reminder to read &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1230000000545&quot;&gt;High Performance Browser Networking&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://codon.com/refactoring-ruby-with-monads&quot;&gt;Refactoring Ruby with Monads&lt;/a&gt; - One of the best talks I&#39;ve ever seen. Tom Stuart introduces the concept of monads and it&#39;s really mind blowing because I never thought about things (he has 3 real world examples) like that before. I like the way he presented and his understandable explanations. I need to check out his other works!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ConradIrwin/console.log&quot;&gt;console.log gem&lt;/a&gt; - In one of the lightning talks, Conrad Irwin talks about the console.log gem that spits any object in the console of the browser. Looks very cool and I need to check it out!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>GitHub References</title>
   <link href="http://www.tseivan.com/github_references"/>
   <updated>2014-08-17T00:00:00-04:00</updated>
   <id>http://www.tseivan.com/github_references</id>
   <content type="html">&lt;p&gt;There are two special types of references that are available in your GitHub repository. GitHub creates these references for each pull request; they are &lt;code&gt;pull/:id/head&lt;/code&gt; and &lt;code&gt;pull/:id/merge&lt;/code&gt;. Let&#39;s take a look at them and how they can be useful.&lt;/p&gt;

&lt;h2&gt;Pull Request Head&lt;/h2&gt;

&lt;p&gt;GitHub automatically stashes all the changes for a pull request against the main repository. And this head reference points at the latest commit. Why does GitHub do this? Well, when the requester deletes his/her fork, one might think that the changes are also lost. However, this is not true. You are still able to merge the pull request because those changes are &quot;saved&quot; in the reference. Nothing is lost!&lt;/p&gt;

&lt;p&gt;In addition, you can checkout the pull request locally without needing to add a remote refspec. This is extremely helpful when there is a stale pull request that conflicts with master and the remote repository has been deleted. You would simply &lt;a href=&quot;https://help.github.com/articles/checking-out-pull-requests-locally#modifying-an-inactive-pull-request-locally&quot;&gt;modify it locally&lt;/a&gt; before merging.&lt;/p&gt;

&lt;p&gt;One of the ways I use this reference to improve my workflow is that I can do a comparison across pull requests on a project. Sometimes, a massive project can be broken into two pull requests where one includes the other. That is, the successive pull request depends on the work done in the previous one. I would code review the first one and give it a &lt;a href=&quot;https://assets.github.com/images/icons/emoji/%2B1.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;emoji&quot; title=&quot;:+1:&quot; alt=&quot;:+1:&quot; src=&quot;https://assets.github.com/images/icons/emoji/%2B1.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; style=&quot;max-width:100%;&quot;&gt;&lt;/a&gt;. But when, I review the second pull request, the diff on GitHub includes changes from &lt;strong&gt;both&lt;/strong&gt; pull requests. This is not ideal because I want to see changes that were made specifically for the second pull request; the commits that I haven&#39;t seen yet. With head references, I can make this view by constructing a GitHub compare link between those two references. Here is a quick demonstration of this: &lt;a href=&quot;https://github.com/ivantsepp/ivantsepp.github.io/pull/8&quot;&gt;#8&lt;/a&gt; works on top of &lt;a href=&quot;https://github.com/ivantsepp/ivantsepp.github.io/pull/7&quot;&gt;#7&lt;/a&gt; but the &lt;a href=&quot;https://github.com/ivantsepp/ivantsepp.github.io/compare/pull%2F7%2Fhead...pull%2F8%2Fhead?w=1&quot;&gt;compare link&lt;/a&gt; only shows the commits made in the second pull request.&lt;/p&gt;

&lt;p&gt;As a side note, just as you can hide whitespace diff with &lt;code&gt;git diff -w&lt;/code&gt; or &lt;code&gt;git diff --ignore-all-space&lt;/code&gt; on the command line, you can add &lt;code&gt;?w=1&lt;/code&gt; to the URL to get the same effect with the GitHub view. There are some other &lt;a href=&quot;https://github.com/blog/967-github-secrets&quot;&gt;useful GitHub secrets&lt;/a&gt; you should check out.&lt;/p&gt;

&lt;p&gt;Another way I used this functionality is extending the concept of checking out a pull request locally. &lt;a href=&quot;https://github.com/princesspretzel&quot; class=&quot;user-mention&quot;&gt;@princesspretzel&lt;/a&gt;, who came up with this idea initially, wanted to be able to open all the files corresponding to a pull request. There are two use cases for this feature:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You are switching between branches and want to open all the changed files to resume work.&lt;/li&gt;
&lt;li&gt;You are code reviewing a massive branch and want to open the files to view changes instead of constantly scrolling the long diff view.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To achieve this, we can ask the &lt;a href=&quot;https://developer.github.com/v3/pulls/#list-pull-requests-files&quot;&gt;GitHub Pull Request API&lt;/a&gt; to get a list of modified files for a pull request. Afterwards, we can checkout locally using &lt;code&gt;pull/:id/head&lt;/code&gt; which allows us to see the changes in the editor (the pull request might have added new files). The last step is to simply invoke the text editor to open those modified files. We are currently working on a &lt;a href=&quot;https://github.com/princesspretzel/spoke&quot;&gt;sublime plugin&lt;/a&gt; that does just that and I&#39;ve created this command in &lt;a href=&quot;https://github.com/ivantsepp/github_tools&quot;&gt;GithubTools&lt;/a&gt;, my collection of command line tools for GitHub.&lt;/p&gt;

&lt;h2&gt;Pull Request Merge&lt;/h2&gt;

&lt;p&gt;The pull request merge reference points to the merge commit between the pull request and the base branch. I believe that GitHub creates this commit to test the mergeability of the pull request. How can this reference be useful? Well, TravisCI uses it to get a copy of the repository as if the pull request has been merged. Then, it will run the tests against this working copy. If you look at &lt;a href=&quot;https://travis-ci.org/jekyll/jekyll/jobs/32736147&quot;&gt;this example&lt;/a&gt;, you can see the job runs &lt;code&gt;git fetch origin +refs/pull/2762/merge:&lt;/code&gt; followed by a &lt;code&gt;git checkout -qf FETCH_HEAD&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Another hypothetical use case for this reference is checking mergeability. You can determine &lt;a href=&quot;https://developer.github.com/v3/pulls/#mergability&quot;&gt;mergeability&lt;/a&gt; by using the API but we can do this programmatically without the API call. One could fetch both the pull request head and the pull request merge references and determine if the latest sha in the pull request is in the history of the merge commit. The pull request is mergeable if so and not mergeable otherwise. I am planning on testing this out and implementing it in &lt;a href=&quot;https://github.com/ivantsepp/github_tools&quot;&gt;GithubTools&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Let me know if you know of any other ways of using GitHub&#39;s special references for creating a better workflow. Here are some external links that you definitely should check out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://zachholman.com/talk/more-git-and-github-secrets/&quot;&gt;Zach Holman&#39;s talk &quot;More Git and GitHub Secrets&quot;&lt;/a&gt; - This is where I learned about these references. The talk also has some of nice nuggets of information.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://christoph.ruegg.name/blog/git-howto-mirror-a-github-repository-without-pull-refs.html&quot;&gt;Git Howto: Mirror a GitHub Repo Without Pull Refs&lt;/a&gt; - I came across this blog post while writing this. The post shows you how to mirror a GitHub repository without copying these references&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://coderwall.com/p/3dgwcg&quot;&gt;GitHub: add remote for pulls and merges&lt;/a&gt; - Add a remote refspec for grabbing these pull request head and merge references&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 

</feed>
